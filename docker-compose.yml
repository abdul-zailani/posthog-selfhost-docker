version: "3.8"

services:
  postgres:
    image: postgres:12.13-alpine3.17
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-posthog}
      POSTGRES_USER: ${POSTGRES_USER:-posthog}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test:
        ["CMD", "sh", "-c", "pg_isready -U $$POSTGRES_USER -h $$(hostname -i)"]
      interval: 10s
      start_period: 30s

  redis:
    image: redis:6.2.7-alpine
    restart: on-failure
    ports:
      - "6379:6379"
    command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      start_period: 30s

  clickhouse:
    build: ./clickhouse-posthog/
    restart: on-failure
    depends_on:
      - kafka
      - zookeeper
    volumes:
      - clickhouse_data:/var/lib/clickhouse/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8123/ping || exit 1
      interval: 2s
      timeout: 2s
      retries: 16

  zookeeper:
    image: zookeeper:3.7.0
    restart: on-failure
    volumes:
      - zookeeper_data:/data/
      - zookeeper_datalog:/datalog/
      - zookeeper_logs:/logs/

  kafka:
    image: bitnami/kafka:2.8.1-debian-10-r99
    restart: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1001
      KAFKA_CFG_RESERVED_BROKER_MAX_ID: 1001
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "true"

  worker: &posthog_common
    image: posthog/posthog:release-1.43.0
    command: ./bin/docker-worker-celery --with-scheduler
    restart: on-failure
    environment:
      SENTRY_DSN: ${SENTRY_DSN}
      SITE_URL: https://${DOMAIN}
      DISABLE_SECURE_SSL_REDIRECT: "true"
      IS_BEHIND_PROXY: "true"
      TRUST_ALL_PROXIES: "true"
      DATABASE_URL: "postgres://${POSTGRES_USER:-posthog}:${POSTGRES_PASSWORD:-secret}@postgres:5432/${POSTGRES_DB:-posthog}"
      CLICKHOUSE_HOST: "clickhouse"
      CLICKHOUSE_DATABASE: "posthog"
      CLICKHOUSE_SECURE: "false"
      CLICKHOUSE_VERIFY: "false"
      KAFKA_URL: "kafka://kafka"
      REDIS_URL: "redis://redis:6379/"
      SECRET_KEY: ${SECRET_KEY}
      PGHOST: postgres
      PGUSER: ${POSTGRES_USER:-posthog}
      PGPASSWORD: ${POSTGRES_PASSWORD:-secret}
      SKIP_SERVICE_VERSION_REQUIREMENTS: 1
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      object_storage:
        condition: service_healthy
    links:
      - postgres
      - redis
      - clickhouse
      - kafka
      - object_storage

  web:
    <<: *posthog_common
    command: sh -c "./bin/docker-server && ./bin/docker-frontend"
    ports:
      - "8000:8000"
      - "8234:8234"

  plugins:
    image: posthog/posthog:release-1.43.0
    command: ./bin/plugin-server --no-restart-loop
    restart: on-failure
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER:-posthog}:${POSTGRES_PASSWORD:-secret}@postgres:5432/${POSTGRES_DB:-posthog}"
      KAFKA_HOSTS: "kafka:9092"
      REDIS_URL: "redis://redis:6379/"
      CLICKHOUSE_HOST: "clickhouse"
      SKIP_SERVICE_VERSION_REQUIREMENTS: 1
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      object_storage:
        condition: service_healthy
    links:
      - postgres
      - redis
      - clickhouse
      - kafka
      - object_storage

  object_storage:
    image: minio/minio:RELEASE.2022-09-17T00-09-45Z.fips
    restart: on-failure
    volumes:
      - object_storage_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: sh
    command: -c 'mkdir -p /data/posthog && minio server --address ":19000" --console-address ":19001" /data'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -sS http://127.0.0.1:19000/minio/health/live || exit 1",
        ]
      interval: 10s
      start_period: 30s

  asyncmigrationscheck:
    <<: *posthog_common
    command: python manage.py run_async_migrations --check
    restart: "no"

  caddy:
    image: caddy:2.6.4-alpine
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

volumes:
  postgres_data:
  clickhouse_data:
  zookeeper_data:
  zookeeper_datalog:
  zookeeper_logs:
  object_storage_data:
  caddy_data:
  caddy_config:
